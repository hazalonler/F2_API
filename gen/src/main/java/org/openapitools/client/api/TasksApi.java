/*
 * Flask REST API For F2 Application
 * An API about lists and tasks
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Task;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for controllerTasksControllerCreate
     * @param boardId The ID of the board to get (required)
     * @param task Task to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new task </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllerTasksControllerCreateCall(String boardId, Task task, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = task;

        // create path and map variables
        String localVarPath = "/board/{board_id}/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (boardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_id", boardId));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllerTasksControllerCreateValidateBeforeCall(String boardId, Task task, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling controllerTasksControllerCreate(Async)");
        }
        
        // verify the required parameter 'task' is set
        if (task == null) {
            throw new ApiException("Missing the required parameter 'task' when calling controllerTasksControllerCreate(Async)");
        }
        

        okhttp3.Call localVarCall = controllerTasksControllerCreateCall(boardId, task, _callback);
        return localVarCall;

    }

    /**
     * Create a new task
     * 
     * @param boardId The ID of the board to get (required)
     * @param task Task to create (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new task </td><td>  -  </td></tr>
     </table>
     */
    public void controllerTasksControllerCreate(String boardId, Task task) throws ApiException {
        controllerTasksControllerCreateWithHttpInfo(boardId, task);
    }

    /**
     * Create a new task
     * 
     * @param boardId The ID of the board to get (required)
     * @param task Task to create (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new task </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> controllerTasksControllerCreateWithHttpInfo(String boardId, Task task) throws ApiException {
        okhttp3.Call localVarCall = controllerTasksControllerCreateValidateBeforeCall(boardId, task, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new task (asynchronously)
     * 
     * @param boardId The ID of the board to get (required)
     * @param task Task to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new task </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllerTasksControllerCreateAsync(String boardId, Task task, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllerTasksControllerCreateValidateBeforeCall(boardId, task, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for controllerTasksControllerDelete
     * @param id The ID of the task to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted task </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllerTasksControllerDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllerTasksControllerDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling controllerTasksControllerDelete(Async)");
        }
        

        okhttp3.Call localVarCall = controllerTasksControllerDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete a task
     * 
     * @param id The ID of the task to get (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted task </td><td>  -  </td></tr>
     </table>
     */
    public void controllerTasksControllerDelete(String id) throws ApiException {
        controllerTasksControllerDeleteWithHttpInfo(id);
    }

    /**
     * Delete a task
     * 
     * @param id The ID of the task to get (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted task </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> controllerTasksControllerDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = controllerTasksControllerDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a task (asynchronously)
     * 
     * @param id The ID of the task to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted task </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllerTasksControllerDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllerTasksControllerDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for controllerTasksControllerReadTasks
     * @param boardId The ID of the board to get (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully read all tasks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllerTasksControllerReadTasksCall(String boardId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/board/{board_id}/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (boardId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("board_id", boardId));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllerTasksControllerReadTasksValidateBeforeCall(String boardId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            throw new ApiException("Missing the required parameter 'boardId' when calling controllerTasksControllerReadTasks(Async)");
        }
        

        okhttp3.Call localVarCall = controllerTasksControllerReadTasksCall(boardId, _callback);
        return localVarCall;

    }

    /**
     * Read all tasks
     * 
     * @param boardId The ID of the board to get (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully read all tasks </td><td>  -  </td></tr>
     </table>
     */
    public void controllerTasksControllerReadTasks(String boardId) throws ApiException {
        controllerTasksControllerReadTasksWithHttpInfo(boardId);
    }

    /**
     * Read all tasks
     * 
     * @param boardId The ID of the board to get (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully read all tasks </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> controllerTasksControllerReadTasksWithHttpInfo(String boardId) throws ApiException {
        okhttp3.Call localVarCall = controllerTasksControllerReadTasksValidateBeforeCall(boardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Read all tasks (asynchronously)
     * 
     * @param boardId The ID of the board to get (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully read all tasks </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllerTasksControllerReadTasksAsync(String boardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllerTasksControllerReadTasksValidateBeforeCall(boardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for controllerTasksControllerUpdate
     * @param id The ID of the task to get (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated task </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllerTasksControllerUpdateCall(String id, Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/tasks/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call controllerTasksControllerUpdateValidateBeforeCall(String id, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling controllerTasksControllerUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = controllerTasksControllerUpdateCall(id, body, _callback);
        return localVarCall;

    }

    /**
     * Update a task
     * 
     * @param id The ID of the task to get (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated task </td><td>  -  </td></tr>
     </table>
     */
    public void controllerTasksControllerUpdate(String id, Object body) throws ApiException {
        controllerTasksControllerUpdateWithHttpInfo(id, body);
    }

    /**
     * Update a task
     * 
     * @param id The ID of the task to get (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated task </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> controllerTasksControllerUpdateWithHttpInfo(String id, Object body) throws ApiException {
        okhttp3.Call localVarCall = controllerTasksControllerUpdateValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a task (asynchronously)
     * 
     * @param id The ID of the task to get (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated task </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call controllerTasksControllerUpdateAsync(String id, Object body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = controllerTasksControllerUpdateValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
